from abc import ABC

class AbstractProduct(ABC):
    def get_description(self):
        pass

class Product(AbstractProduct):
    def __init__(self, name: str, quantity: int, price: float):
        self.name = name
        self.quantity = quantity
        self.__price = price

    def get_price(self):
        return self.__price

    def set_price(self, new_price):
        if new_price >= 0:
            self.__price = new_price
        else:
            raise ValueError("Цена не может быть меньше нуля!")

    def __add__(self, other):
        if isinstance(other, Product):
            new_quantity = self.quantity + other.quantity
            new_price = (self.__price * self.quantity + other.__price * other.quantity) / new_quantity
            return Product(f"{self.name} + {other.name}", new_quantity, new_price)
        else:
            raise TypeError("Можно складывать только объекты Product")

    def __lt__(self, other):
        if isinstance(other, Product):
            return self.__price < other.__price
        else:
            raise TypeError("Можно сравнивать только объекты Product")

    def __gt__(self, other):
        if isinstance(other, Product):
            return self.__price > other.__price
        else:
            raise TypeError("Можно сравнивать только объекты Product")

    def __str__(self):
        return f"{self.name} (Количество: {self.quantity}, Цена: {self.__price})"

    def get_description(self):
        return f'{self.name}, {self.__price}, {self.quantity}'

class Book(Product, AbstractProduct):
    def __init__(self, name: str, quantity: int, price: float, author: str):
        super().__init__(name, quantity, price)
        self.author = author

    def __str__(self):
        return f"Книга: {self.name}, Автор: {self.author} (Количество: {self.quantity}, Цена: {self.get_price()})"

    def get_description(self):
        return f'Книга: {self.name}, Автор: {self.author}'

class Laptop(Product, AbstractProduct):
    def __init__(self, name: str, quantity: int, price: float, brand: str):
        super().__init__(name, quantity, price)
        self.brand = brand

    def get_description(self):
        return f"Ноутбук: {self.name}, Бренд: {self.brand} (Количество: {self.quantity}, Цена: {self.get_price()})"

try:
    invalid_book = Book("Ошибка наследования", 1, -100, "Автор")
    # print(invalid_book)  # Цена -100 пройдет без ошибки!
    # Синтаксическая ошибка в Laptop (код не запустится)
    laptop = Laptop("Test", 1, 50000, "TestBrand")
except SyntaxError as e:
    print("Синтаксическая ошибка:", e)
except ValueError as e:
    print("Ошибка значения:", e)

book1 = Book("Война и мир", 5, 500, "Лев Толстой")
book2 = Book("Преступление и наказание", 3, 450, "Фёдор Достоевский")

print(book1 + book2) # Вывод: Война и мир + Преступление и наказание (Количество: 8, Цена: 481.25)
print(book1 > book2)  # True (500 > 450)
print(book1 < book2)  # False

try:
    invalid_book = Book("Ошибка", 1, -100, "Автор")  # ValueError: Цена не может быть меньше нуля!
except ValueError as e:
    print(e)

book = Book("Война и мир", 5, 500, "Лев Толстой")
print(book.get_description())
